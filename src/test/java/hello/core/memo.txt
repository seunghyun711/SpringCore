<스프링 빈 조회 - 상속관계>
부모 타입을 조회하면 자식 타입도 다 같이 조회한다.
모든 자바 객체의 최고 부모인 Object 타입으로 조회하면 모든 스프링 빈을 조회한다.

<BeanDefinition>
스프링은 BeanDefinition으로 스프링의 설정 메타 정보를 추상화한다.
스프링 빈 생성은 2가지 방법이 있다.
1. 직접 스프링 빈으로 등록
2. 팩토리 빈으로 등록 -> 일반적으로 사용

<스프링 없는 순수 DI 컨테이너>
지금까지 만든 AppConfig는 순수 DI 컨테이너로 요청을 할 때마다 객체를 새로 생성했다.
따라서 요청이 100개가 들어오면 그 요청에 따른 객체를 100번을 호추하는 것이다. 메모리 낭비가 심하다.
해결방안으로 객체가 1개만 생성되고 공유하도록 설계, 즉 싱글톤 패턴을 적용해야 한다.

<싱글톤 패턴>
싱글톤을 적용하면 요청이 올 때마다 객체를 생성하는 것이 아니라 이미 만들어진 객체를 공유해서 효율적으로 사용할 수 있다.
문제점
- 싱글톤 구현 코드 필요
- 의존관계상 클라이언트가 구체 클래스에 의존
- 클라이언트가 구체 클래스에 의존해 OCP원칙을 위반 할 가능성이 생긴다.
- 테스트가 어렵다.
- 내부 속성 변경하거나 초기화가 어렵다.
- private 생성자로 자식 클래스를 만들기 어렵다.
- 유연성이 떨어진다.